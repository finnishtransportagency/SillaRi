scalar DateTime
scalar Date
scalar Time
scalar GraphQLLong
scalar Object
scalar GraphQLBigDecimal
scalar GraphQLBigInteger
scalar Url
scalar Json

type Transport {
    id: ID!
    permitId: Int
    routeId: Int
    name: String!
    height: Float
    width: Float
    length: Float
    totalMass: Float
    registrations: [TransportRegistration]
    axles: [Axle]
}

type TransportRegistration {
    id: ID!
    transportId: Int
    registrationNumber: String
}

type Axle {
    id: ID!
    transportId: Int
    axleNumber: Int
    weight: Int
    distanceToNext: Float
    maxDistanceToNext: Float
}

type Permit {
    id: ID!
    companyId: Int
    permitNumber: String
    validStartDate: String
    validEndDate: String
    routes: [Route]
    transports: [Transport]
}

type Address {
    id: ID!
    street: String
    postalcode: String
    city: String
}

type Bridge {
    id: ID!
    name: String
    identifier: String
    municipality: String
    geojson: String
}

type RouteBridge {
    id: ID!
    routeId: Int!
    bridge: Bridge!
    crossingInstruction: String
}

type Crossing {
    id: ID!
    routeBridgeId: Int!
    drivingLineInfo: Boolean
    speedInfo: Boolean
    exceptionsInfo: Boolean
    describe: Boolean
    drivingLineInfoDescription: String
    speedInfoDescription: String
    exceptionsInfoDescription: String
    extraInfoDescription: String
    started: String
    permanentBendings: Boolean
    twist: Boolean
    damage: Boolean
    draft: Boolean
    images: [File]
}

type Company {
    id: ID!
    name: String
    permits: [Permit]
}

type Route {
    id: ID!
    permitId: Int
    name: String
    departureAddress: Address
    arrivalAddress: Address
    departureTime: String
    arrivalTime: String
    geojson: String
    routeBridges: [RouteBridge]
    transports: [Transport]
    crossings: [Crossing]
}

type File {
    id: Int!
    crossingId: Int
    objectKey: String
    taken: String
    filename: String!
    mimetype: String!
    encoding: String!
}

input CrossingInput {
    id: ID!
    routeBridgeId: Int!
    started: String
    drivingLineInfo: Boolean
    speedInfo: Boolean
    exceptionsInfo: Boolean
    describe: Boolean
    drivingLineInfoDescription: String
    speedInfoDescription: String
    exceptionsInfoDescription: String
    extraInfoDescription: String
    permanentBendings: Boolean
    twist: Boolean
    damage: Boolean
    draft: Boolean
}

type Mutation {
    singleUpload(crossingId: String!, filename: String!, file: String!, taken: String!): File!,
    updateCrossing(crossing: CrossingInput!): Crossing,
    startCrossing(routeBridgeId: Int!) : Crossing,
}

type Query {
    Companies(limit: Int = 10) : [Company]
    CompanyList(limit: Int = 10) : [Company]
    Company(id : Int!) : Company
    Route(id :Int!) : Route
    Bridge(id :Int!) : Bridge
    RouteBridge(id: Int!) : RouteBridge
    Permit(id :Int!) : Permit
    Crossing(id :Int!) : Crossing
    CrossingOfRouteBridge(routeBridgeId :Int!) : Crossing
    Transport(id :Int!): Transport
    TransportOfRoute(permitId :Int!, routeId :Int!): Transport
}
