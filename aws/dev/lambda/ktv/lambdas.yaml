AWSTemplateFormatVersion: '2010-09-09'
Description: An AWS Serverless Specification template describing your function.
Resources:
  # Adding-lambda
  testKtvLambdaRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
          Statement:
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:
          - PolicyName: test-ktv-lambda-secret-policy
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action: 'secretsmanager:GetSecretValue'
                    Resource: 'arn:aws:secretsmanager:::api-key-for-kvt:kvt-api-key'
          - PolicyName: test-sillari-photosnew2-supervisions-s3-policy
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action: 's3:GetObject'
                    Resource:
                      - 'arn:aws:s3:::sillari-photosnew2/*'
                      - 'arn:aws:s3:::sillari-supervisions/*'
                      - 'arn:aws:s3:::sillari-reports2/*'

  testKTVLambda:
    Type: AWS::Lambda::Function
    DeletionPolicy: Retain
    Properties:
      Environment:
        Variables:
          KTV_API_KEY_SECRET_ID: 'api-key-for-kvt'
          KTV_HOSTNAME: 'devapi.testivaylapilvi.fi'
      Code:
        ZipFile: |
          const https = require('https');
          async function postFileToKVT(objectData, metadata, apiKey, imageKey) {
          return new Promise((resolve, reject) => {
          // Sillarin tunnisteavaruus on 22 ja kuvatyyppi 2101.
          const ID_SPACE = 22;
          const PIC_TYPE = 2101;
          const { bridgeidentifier, bridgename, bridgeoid, createdtime, filename, objectidentifier, permitnumber, roadaddress, supervisionexceptional, supervisionfinishedtime, supervisionid, supervisionstartedtime, x_coord, y_coord } = metadata;
          let bridgeProcessedName = '';
          if (bridgename) {
          const decodedName = decodeURIComponent(bridgename);
          // decodeURIComponent does not handle '+' encoded in Java
          bridgeProcessedName = decodedName.replace(/\+/g, ' ');
          }
          const roadAddressParts = roadaddress ? roadaddress.split('-') : [];

          // supervisionexceptional has been converted from Boolean to string - it can be null/undefined, true or false
          let isExceptional = null;
          if (supervisionexceptional === true) {
          isExceptional = true;
          } else if (supervisionexceptional === false) {
          isExceptional = false;
          }
          // TODO post supervision metadata how?
          const postData = JSON.stringify({
          data: [{
          tunnisteavaruus: ID_SPACE,
          tunniste: objectidentifier,
          kuvatyyppi: PIC_TYPE,
          nimi: filename,
          image: objectData,
          tie: roadAddressParts[0] || null,
          tieosa: roadAddressParts[1] || null,
          etaisyys: roadAddressParts[2] || null,
          ajorata: roadAddressParts[3] || null,
          xkoordinaatti: x_coord,
          ykoordinaatti: y_coord,
          kuljetuslupanumero: permitnumber,
          ylitys_aloitusaika: supervisionstartedtime,
          ylitys_paattymisaika: supervisionfinishedtime || null, // Is usually undefined for images
          sillantunnus: bridgeidentifier,
          valvontatunnus: supervisionid,
          poikkeusjarjestely: isExceptional,
          }]
          });
          const options = {
          hostname: process.env.KTV_HOSTNAME,
          path: '/ktv/api/public/KTJLisaaKuvia',
          // path: '/ktv/api/ktv/KTJLisaaKuvia',
          method: 'POST',
          headers: {
          'Content-Type': 'application/json',
          'x-api-key': apiKey
          }
          };
          const req = https.request(options, res => {
          let body = '';
          console.log('statusCode', res.statusCode);
          res.setEncoding('utf8');
          res.on('data', (chunk) => body += chunk);
          res.on('end', () => {
          console.log('Successfully processed HTTPS response');
          console.log('RES body', body);
          });
          });
          req.on('error', error => {
          console.error(error)
          });
          req.write(postData);
          req.end();
          });
          }
          const AWS = require('aws-sdk');
          const region = 'eu-west-1';
          const secretClient = new AWS.SecretsManager({
          region: region
          });
          const s3 = new AWS.S3({ apiVersion: '2006-03-01' });
          exports.handler = async (event, context) => {;
          console.log('Received event:', JSON.stringify(event, null, 2));
          // Get the object from the event and show its content type
          const bucket = event.Records[0].s3.bucket.name;
          const imageKey = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));
          console.log('bucket', bucket);
          const params = {
          Bucket: bucket,
          Key: imageKey,
          };
          try {
          const secret = await getSecret();
          console.log('got secret');
          const secretJSON = secret.SecretString;
          const parsed = JSON.parse(secretJSON);
          const apiKey = parsed['kvt-api-key'];
          const object = await s3.getObject(params).promise();
          const { Body, Metadata } = object;
          console.log('got object');
          // Convert Body from a Buffer to a String
          const objectData = Body.toString('base64'); // Use the encoding necessary
          await postFileToKVT(objectData, Metadata, apiKey, imageKey);
          } catch (error) {
          console.error(error);
          return 0;
          }
          return 1;
          };
          async function getSecret() {
          const sec = await secretClient.getSecretValue({ SecretId: process.env.KTV_API_KEY_SECRET_ID }).promise();
          console.log('*** SECRET WAS FETCHED FROM SECRETS MANAGER');
          return sec;
          }

      Handler: index.handler
      Runtime: nodejs16.x
      Description: ''
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt 'testKtvLambdaRole.Arn'

  testKtvLambdaInvokePhotoPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt testKTVLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::sillari-photosnew2'

  testKtvLambdaInvokeReportsPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt testKTVLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::sillari-reports2'

  #Removal-lambda
  testKtvRemoveLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: test-ktv-remove-lambda-secret-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: 'arn:aws:secretsmanager:::api-key-for-kvt:kvt-api-key'
        - PolicyName: test-sillari-photosnew2-supervisions-s3-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:GetObject'
                Resource:
                  - 'arn:aws:s3:::sillari-photosnew2/*'
                  - 'arn:aws:s3:::sillari-supervisions/*'
                  - 'arn:aws:s3:::sillari-reports/*'

  testKtvRemoveLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs16.x
      Description: >-
        An Amazon S3 trigger that retrieves metadata for the object that has
        been updated.
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt 'testKtvRemoveLambdaRole.Arn'
      Environment:
        Variables:
          KTV_API_KEY_SECRET_ID: 'api-key-for-kvt'
          KTV_HOSTNAME: 'devapi.testivaylapilvi.fi'
      Code:
        ZipFile: |
          console.log("Loading function");

          const AWS = require("aws-sdk");
          const region = "eu-west-1";
          const secretClient = new AWS.SecretsManager({
            region: region,
          });
          const https = require("https");

          //Kuvien poistoon tarvitaan nämä parametrit
          // {"data": [{"tunnisteavaruus": <tunnisteavaruus>,"tunniste": "<poistettavan kuvan tunniste>","poista": "true"}]}
          //
          // "poista": "true" -> kuva poistetaan kokonaan, "poista": "false" -> kuva historioidaan Kuvatiedossa.

          async function removeFileFromKVT(apiKey, ktvIdentifier) {
              return new Promise((resolve, reject) => {
                // Sillarin tunnisteavaruus on 22 ja kuvatyyppi 2101.
                const idSpace = 22;

                console.log("Remove from ktv: " + ktvIdentifier);

                const postData = JSON.stringify({
                  data: [
                    {
                      tunnisteavaruus: idSpace,
                      tunniste: ktvIdentifier,
                      poista: true,
                    },
                  ],
                });

                console.log(postData);

                const options = {
                  hostname: process.env.KTV_HOSTNAME,
                  path: "/ktv/api/public/KTJPoistaKuvia",
                  // path: '/ktv/api/ktv/KTJPoistaKuvia',
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "x-api-key": apiKey,
                  },
                };

                const req = https.request(options, (res) => {
                  let body = "";
                  console.log("statusCode", res.statusCode);

                  res.setEncoding("utf8");
                  res.on("data", (chunk) => (body += chunk));

                  res.on("end", () => {
                    console.log("Successfully processed HTTPS response");
                    console.log("RES body", body);
                  });
                });

                req.on("error", (error) => {
                  console.error(error);
                });

                req.write(postData);
                req.end();
              });
          };

          exports.handler = async (event, context) => {
            console.log("Received event:", JSON.stringify(event, null, 2));
            const key = decodeURIComponent(
              event.Records[0].s3.object.key.replace(/\+/g, " ")
            );
            try {
              const secret = await getSecret();
              console.log("got secret");

              const secretJSON = secret.SecretString;
              const parsed = JSON.parse(secretJSON);
              const apiKey = parsed["kvt-api-key"];

              //supervision_100_SIL-img-101 -> SIL-img-10
              const keyParts = key ? key.split("_") : [];
              console.log("keyParts: " + keyParts);

              const ktvIdentifier = keyParts[2] || null;

              if (!ktvIdentifier) {
                console.error("Illegal key: " + key);
                return 0;
              }

              await removeFileFromKVT(apiKey, ktvIdentifier);
            } catch (error) {
              console.error(error);
              return 0;
            }
            return 1;
          };

          async function getSecret() {
            const sec = await secretClient
              .getSecretValue({ SecretId: process.env.KTV_API_KEY_SECRET_ID })
              .promise();
            console.log("*** SECRET WAS FETCHED FROM SECRETS MANAGER");
            return sec;
          }

  testKtvRemoveLambdaInvokePhotoPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt testKtvRemoveLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::sillari-photosnew2'

  testKtvRemoveLambdaInvokeReportsPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt testKtvRemoveLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::sillari-reports'

  testPhotoBucket:
    Type: 'AWS::S3::Bucket'
    DependsOn:
      - testKtvLambdaInvokePhotoPermission
      - testKtvLambdaInvokeReportsPermission
      - testKtvRemoveLambdaInvokePhotoPermission
      - testKtvRemoveLambdaInvokeReportsPermission
    Properties:
      BucketName: sillari-photosnew2
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt testKTVLambda.Arn
          - Event: 's3:ObjectRemoved:Delete'
            Function: !GetAtt testKtvRemoveLambda.Arn