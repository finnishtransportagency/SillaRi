AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  An Amazon S3 trigger that retrieves metadata for the object that has been
  updated.
Resources:
  testKtvRemoveLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: test-ktv-remove-lambda-secret-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: 'arn:aws:secretsmanager:eu-west-1:384409174079:secret:api-key-for-kvt-TeLyiL'
        - PolicyName: test-sillari-photos-supervisions-s3-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:GetObject'
                Resource:
                  - 'arn:aws:s3:::sillari-photos/*'
                  - 'arn:aws:s3:::sillari-supervisions/*'
                  - 'arn:aws:s3:::sillari-reports/*'

  testKtvRemoveLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs16.x
      Description: >-
        An Amazon S3 trigger that retrieves metadata for the object that has
        been updated.
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt 'testKtvRemoveLambdaRole.Arn'
      Environment:
        Variables:
          KTV_API_KEY_SECRET_ID: >-
            arn:aws:secretsmanager:eu-west-1:384409174079:secret:api-key-for-kvt-TeLyiL
          KTV_HOSTNAME: devapi.testivaylapilvi.fi
      Code:
        ZipFile: |
          console.log("Loading function");

          const AWS = require("aws-sdk");
          const region = "eu-west-1";
          const secretClient = new AWS.SecretsManager({
            region: region,
          });
          const https = require("https");

          //Kuvien poistoon tarvitaan nämä parametrit
          // {"data": [{"tunnisteavaruus": <tunnisteavaruus>,"tunniste": "<poistettavan kuvan tunniste>","poista": "true"}]}
          //
          // "poista": "true" -> kuva poistetaan kokonaan, "poista": "false" -> kuva historioidaan Kuvatiedossa.

          async function removeFileFromKVT(apiKey, ktvIdentifier) {
              return new Promise((resolve, reject) => {
                // Sillarin tunnisteavaruus on 22 ja kuvatyyppi 2101.
                const idSpace = 22;

                console.log("Remove from ktv: " + ktvIdentifier);

                const postData = JSON.stringify({
                  data: [
                    {
                      tunnisteavaruus: idSpace,
                      tunniste: ktvIdentifier,
                      poista: true,
                    },
                  ],
                });

                console.log(postData);

                const options = {
                  hostname: process.env.KTV_HOSTNAME,
                  path: "/ktv/api/public/KTJPoistaKuvia",
                  // path: '/ktv/api/ktv/KTJPoistaKuvia',
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "x-api-key": apiKey,
                  },
                };

                const req = https.request(options, (res) => {
                  let body = "";
                  console.log("statusCode", res.statusCode);

                  res.setEncoding("utf8");
                  res.on("data", (chunk) => (body += chunk));

                  res.on("end", () => {
                    console.log("Successfully processed HTTPS response");
                    console.log("RES body", body);
                  });
                });

                req.on("error", (error) => {
                  console.error(error);
                });

                req.write(postData);
                req.end();
              });
          };

          exports.handler = async (event, context) => {
            console.log("Received event:", JSON.stringify(event, null, 2));
            const key = decodeURIComponent(
              event.Records[0].s3.object.key.replace(/\+/g, " ")
            );
            try {
              const secret = await getSecret();
              console.log("got secret");

              const secretJSON = secret.SecretString;
              const parsed = JSON.parse(secretJSON);
              const apiKey = parsed["kvt-api-key"];

              //supervision_100_SIL-img-101 -> SIL-img-10
              const keyParts = key ? key.split("_") : [];
              console.log("keyParts: " + keyParts);

              const ktvIdentifier = keyParts[2] || null;

              if (!ktvIdentifier) {
                console.error("Illegal key: " + key);
                return 0;
              }

              await removeFileFromKVT(apiKey, ktvIdentifier);
            } catch (error) {
              console.error(error);
              return 0;
            }
            return 1;
          };

          async function getSecret() {
            const sec = await secretClient
              .getSecretValue({ SecretId: process.env.KTV_API_KEY_SECRET_ID })
              .promise();
            console.log("*** SECRET WAS FETCHED FROM SECRETS MANAGER");
            return sec;
          }
          
  testKtvRemoveLambdaInvokePhotoPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt testKtvRemoveLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::sillari-photos'

  testKtvRemoveLambdaInvokeReportsPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt testKtvRemoveLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: s3.amazonaws.com
        SourceAccount: !Ref 'AWS::AccountId'
        SourceArn: !Sub 'arn:aws:s3:::sillari-reports'
