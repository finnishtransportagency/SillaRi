AWSTemplateFormatVersion: 2010-09-09
Description: >-
  (1.0) AWS CloudFormation Template to launch Sillari Grafana
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Vaylapilvi 1.0 Sillari Grafana
Parameters:
  Environment:
      AllowedValues: [Development, Test, Production]
      Description: Environment value to decide resources
      Type: String
      Default: Development
  GrafanaPass:
    Type: String
    Default: ""
  Subnet1:
    Type: String
    Default: subnet-05081b8f507e1af79
  Subnet2:
    Type: String
    Default: subnet-0c5e64f135a73dc1c
  VPC:
    Type: String
    Default: vpc-0b695ee1219477e75
  ServiceName:
    Type: String
    Default: SILLARI-GRAFANA-DEV-FG
  ContainerNameGRAFANA:
    Type: String
    Default: SILLARI-GRAFANA-DEV-FG
  ClusterName:
    Type: String
    Default: sillari-dev
  ImageGRAFANA:
    Type: String
    Default: 384409174079.dkr.ecr.eu-west-1.amazonaws.com/sillari-grafana:latest
  TargetGroupGRAFANAId:
    Type: String
    Default: arn:aws:elasticloadbalancing:eu-west-1:384409174079:targetgroup/sillari-grafana-fg/9c0e62422a82346c

Resources:
  DiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for SillaRi Grafana
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: sillari-grafana-dev
      NamespaceId: ns-6rwymbcy2xp7dhbv

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

  SILLARISERVICE:
    Type: AWS::ECS::Service
    Properties:
        ServiceName: !Ref ServiceName
        Cluster: !Ref ClusterName
        LaunchType: FARGATE
        NetworkConfiguration:
          AwsvpcConfiguration:
            Subnets:
              - !Ref Subnet1
              - !Ref Subnet2
        LoadBalancers:
        - ContainerName: !Ref ContainerNameGRAFANA
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroupGRAFANAId
        DesiredCount: 1
        TaskDefinition: !Ref SILLARITASK
        ServiceRegistries:
          - RegistryArn: !GetAtt DiscoveryService.Arn
            Port: 80

  SILLARITASK:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Family: !Ref ContainerNameGRAFANA
      Cpu: 256
      Memory: 512
      TaskRoleArn: !Ref TaskRole
      ExecutionRoleArn: !Ref ExecutionRole
        # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      ContainerDefinitions:
      - Name: !Ref ContainerNameGRAFANA
        Image: !Ref ImageGRAFANA
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Join ['', [sillari-prometheus-fg-, !Ref Environment]]
        MountPoints:
          - SourceVolume: "volume-0"
            ContainerPath: "/data"
            ReadOnly: false
          - SourceVolume: "volume-1"
            ContainerPath: "/var/sillari"
            ReadOnly: false
          - SourceVolume: "volume-2"
            ContainerPath: "/var/log/grafana"
            ReadOnly: false
          - SourceVolume: "volume-3"
            ContainerPath: "/var/lib/grafana"
            ReadOnly: false
        PortMappings:
          - ContainerPort: 3000
            HostPort: 3000
            Protocol: "tcp"
        Environment:
          - Name: "environment"
            Value: "dev"
          - Name: "roleArn"
            Value: "arn:aws:iam::384409174079:role/SillariPhotosRole"
          - Name: "database_host"
            Value: "sillari-dev.cpakz3z86ezw.eu-west-1.rds.amazonaws.com"
          - Name: "grafana_database_name"
            Value: "grafana"
          - Name: "grafana_user"
            Value: "grafana"
          - Name: "grafana_password"
            Value: Ref! GrafanaPass
          - Name: "grafana_root_uri"
            Value: "sillaridev.testivaylapilvi.fi/grafana/"
          - Name: "grafana_domain"
            Value: "sillaridev.testivaylapilvi.fi"
      Volumes:
        - Name: "volume-0"
          EFSVolumeConfiguration:
            FilesystemId: "fs-2bdd8ce1"
            RootDirectory: "/"
            TransitEncryption: ENABLED
            AuthorizationConfig:
              IAM: ENABLED
        - Name: "volume-1"
          EFSVolumeConfiguration:
            FilesystemId: "fs-2bdd8ce1"
            RootDirectory: "/var/sillari"
            TransitEncryption: ENABLED
            AuthorizationConfig:
              IAM: ENABLED
        - Name: "volume-2"
          EFSVolumeConfiguration:
            FilesystemId: "fs-2bdd8ce1"
            RootDirectory: "/logs/grafana-fg"
            TransitEncryption: ENABLED
            AuthorizationConfig:
              IAM: ENABLED
        - Name: "volume-3"
          EFSVolumeConfiguration:
            FilesystemId: "fs-2bdd8ce1"
            RootDirectory: "/grafana_data-fg"
            TransitEncryption: ENABLED
            AuthorizationConfig:
              IAM: ENABLED

  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, -ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::384409174079:policy/sillari-efs-policy'
        - 'arn:aws:iam::384409174079:policy/sillari-task-kms-decrypt'

  # A role for the containers
  TaskRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Join ['', [!Ref ServiceName, -TaskRole]]
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: 'sts:AssumeRole'
        ManagedPolicyArns:
        - 'arn:aws:iam::384409174079:policy/sillari-efs-policy'
        - 'arn:aws:iam::384409174079:policy/sillari-task-kms-decrypt'
